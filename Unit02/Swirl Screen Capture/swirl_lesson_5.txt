Selection: 1

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 5

  |                                                                          |   0%

| Missing values play an important role in statistics and data analysis. Often,
| missing values must not be ignored, but rather they should be carefully studied
| to see if there's an underlying pattern or cause for their missingness.

...

  |====                                                                      |   5%
| In R, NA is used to represent any value that is 'not available' or 'missing' (in
| the statistical sense). In this lesson, we'll explore missing values further.

...

  |=======                                                                   |  10%
| Any operation involving NA generally yields NA as the result. To illustrate,
| let's create a vector c(44, NA, 5, NA) and assign it to a variable x.

> x <- c(44, NA, 5, NA)

| Excellent job!

  |===========                                                               |  15%
| Now, let's multiply x by 3.

> x * 3
[1] 132  NA  15  NA

| Your dedication is inspiring!

  |===============                                                           |  20%
| Notice that the elements of the resulting vector that correspond with the NA
| values in x are also NA.

...

  |==================                                                        |  25%
| To make things a little more interesting, lets create a vector containing 1000
| draws from a standard normal distribution with y <- rnorm(1000).

> y <- rnorm(1000)

| Excellent job!

  |======================                                                    |  30%
| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| Your dedication is inspiring!

  |==========================                                                |  35%
| Finally, let's select 100 elements at random from these 2000 values (combining y
| and z) such that we don't know how many NAs we'll wind up with or what positions
| they'll occupy in our final vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y,z), 100)

| You are really on a roll!

  |==============================                                            |  40%
| Let's first ask the question of where our NAs are located in our data. The
| is.na() function tells us whether each element of a vector is NA. Call is.na() on
| my_data and assign the result to my_na.

> is.na(my_data)
  [1] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE
 [14] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
 [27]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
 [40] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [53] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE
 [66]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE
 [79] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE
 [92]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Assign the result of is.na(my_data) to the variable my_na.

> my_na <- is.na(my_data)

| Keep up the great work!

  |=================================                                         |  45%
| Now, print my_na to see what you came up with.

> my_na
  [1] FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE
 [14] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
 [27]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE
 [40] FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE
 [53] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE
 [66]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE
 [79] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE
 [92]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE FALSE

| Your dedication is inspiring!

  |=====================================                                     |  50%
| Everywhere you see a TRUE, you know the corresponding element of my_data is NA.
| Likewise, everywhere you see a FALSE, you know the corresponding element of
| my_data is one of our random draws from the standard normal distribution.

...

  |=========================================                                 |  55%
| In our previous discussion of logical operators, we introduced the `==` operator
| as a method of testing for equality between two objects. So, you might think the
| expression my_data == NA yields the same results as is.na(). Give it a try.

> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [27] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [53] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [79] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| You are amazing!

  |============================================                              |  60%
| The reason you got a vector of all NAs is that NA is not really a value, but just
| a placeholder for a quantity that is not available. Therefore the logical
| expression is incomplete and R has no choice but to return a vector of the same
| length as my_data that contains all NAs.

...

  |================================================                          |  65%
| Don't worry if that's a little confusing. The key takeaway is to be cautious when
| using logical expressions anytime NAs might creep in, since a single NA value can
| derail the entire thing.

...

  |====================================================                      |  70%
| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE
| for every NA and FALSE for every numeric value, we can compute the total number
| of NAs in our data.

...

  |========================================================                  |  75%
| The trick is to recognize that underneath the surface, R represents TRUE as the
| number 1 and FALSE as the number 0. Therefore, if we take the sum of a bunch of
| TRUEs and FALSEs, we get the total number of TRUEs.

...

  |===========================================================               |  80%
| Let's give that a try here. Call the sum() function on my_na to count the total
| number of TRUEs in my_na, and thus the total number of NAs in my_data. Don't
| assign the result to a new variable.

> sum(my_data)
[1] NA

| Keep trying! Or, type info() for more options.

| Use sum(my_na) to count the number NAs in the data.

> sum(my_na)
[1] 48

| That's the answer I was looking for.

  |===============================================================           |  85%
| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves
| that everything 'adds up'. Print my_data to the console.

> my_data
  [1]  0.24801793          NA  1.85875560 -1.35743625  0.33494566          NA
  [7]          NA          NA -1.09799966          NA -0.16703815  1.37708301
 [13]          NA -0.02842161          NA  0.39911856          NA  0.33656772
 [19]          NA  2.03961096          NA          NA          NA  0.84220360
 [25]          NA          NA          NA          NA          NA -0.69866193
 [31]          NA          NA -0.42357083          NA          NA -0.20087358
 [37]  0.10982321          NA          NA -2.13605796 -1.92232230 -1.50682216
 [43]          NA          NA          NA  2.35207872 -0.80682882          NA
 [49]          NA  1.18722361          NA          NA -0.82827856 -0.21925728
 [55]  0.03417724  1.60555834 -0.36015523          NA          NA          NA
 [61] -0.37695774          NA  0.07882276 -0.06235047          NA          NA
 [67] -1.09390530  1.29062812          NA -0.12711806 -0.43907766          NA
 [73]  0.24505066 -1.21621173  0.47863585          NA  0.17434445          NA
 [79] -0.19577907 -1.63400311 -0.02525997  0.80059768 -0.03504559 -1.02797480
 [85] -0.90943294          NA -0.23756961          NA -0.22494281          NA
 [91]  0.71276035          NA          NA          NA -2.26336897          NA
 [97]          NA  0.97679959  0.73895666  1.18246186

| Keep working like that and you'll get there!

  |===================================================================       |  90%
| Now that we've got NAs down pat, let's look at a second type of missing value --
| NaN, which stands for 'not a number'. To generate NaN, try dividing (using a
| forward slash) 0 by 0 now.

> 0/0
[1] NaN

| Keep working like that and you'll get there!

  |======================================================================    |  95%
| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if
| you subtract Inf from Inf?

> Inf - Inf
[1] NaN

| Excellent job!

  |==========================================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: No
2: Yes

Selection: 1

| You are quite good my friend!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 