str(stack.loss)    # show the structure of stack.loss
# Scatter Gram Plat of Air.Flow vs Stack.loss
plot(stack.loss,Air.Flow, main="scatterplot Example",xlab="Air.Flow", ylab="stack.loss")
# Week 2 Unit 2 Lecture Assignment
# Terry Johnson
# 12MAY2018
#
data=stackloss  #  set the base data to the stackloss tables
summary(stackloss) # display summary data on stackloss
str(stackloss)     # display structure of stackloss
str(Air.Flow)      # show the structure of Air.Flow
str(stack.loss)    # show the structure of stack.loss
# Scatter Gram Plat of Air.Flow vs Stack.loss
plot(stack.loss,Air.Flow, main="scatterplot Example",xlab="Air.Flow", ylab="stack.loss")
source('~/Desktop/SMU MSDS/Doing Data Science/Unit2/Example/stacklossexample.R')
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y = x - 3
y <- x - 3
y
z = c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c()
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- z -1
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my
my_div
getwd()
ls()
x <- 9
ls()
files()
dir()
list.files9)
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("/testdir")
dir.create("testdir")
setwd(paste(old.dir,"/testdir"))
setwd("testdir")
file.create("mytest.R")
ls()
getwd9)
getwd()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename(from = "mytest.R", to = "mytest2.R")
?file.copy()
file.copy(from="mytest2.R",to="mytest3.R")
?file.path()
file.path()
file.path("mytest3.R")
file.path(getwd(),"mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2/testdir3", recursive = TRUE)
dir.create(file.path("testdir2/testdir3"), recursive = TRUE)
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
setwd(old.dir)
swirl()
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length=30)
my_seq = seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
swirl()
num_vect = c(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
tf = num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char = c("My","name","is")
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"TJ")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!", sep = "")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"), paste = "")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(3,5,7)
c(y[3],y[5],y[7])
info()
y[c(3,5,7)]
skip
c
[]
[] = c(3,5,7)
x[1]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c( foo=11, bar=2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
help(matrix)
?matrix
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
my_matrix2
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
log(10)
log10(10)
log2(10)
??log
?log
log(10)
# Basic Math
# a. The log of a positive number
pos_num = log(10) # the default of log is exponental log.
pos_num  # display exp log of 10.
#
# b. The log of a positive number in base 10
pos_num = log(10, base =10) # the default of log is exponental log.
pos_num  # display log base 10 of 10.
#
# b. The log of a positive number in base 10
pos_num = log(10, base =10) # the log base 10 of 10.
pos_num  # display log base 10 of 10.
#
# c. The log of a negative number in base 10
pos_num = log(-10, base =10) # the log base 10 of 10.
pos_num  # display log base 10 of 10.
#
# c. The log of a negative number in base 10
pos_num = log(-10, base =10) # the log base 10 of -10.
pos_num  # display log base 10 of -10.
log(1)
log(.5)
log(0.00001)
exp(1)
exp(.5)
exp(.1)
exp(.00001)
exp(.0000000001)
exp(.0)
exp(-0.00001)
exp(-0.02001)
exp(-1)
log(-1)
log(0)
log(0,base=10)
sqrt(10)
sqrt(25)
#
# d. The square root of 25
sqrt25 = sqrt(25)
sqrt25
rnorm(1:15)
rnorm(15)
?rnorm
my_vec = rnorm(15)
my_vec
summary(my_vec)
sd(my_vec)
mean(my_vec)
#2.0 Random Number Generation
# a. Generate a vector of 15 standard normal random variables,
#    including the mean and standard deviation of this vector.
my_vec = rnorm(15)  # generate 15 normally distributed random numbers
my_vec    # display resulting vector
mean(my_vec) #display mean
sd(my_vec)   #display standard deviation
#2.0 Random Number Generation
# b. Generate a vector of 15 standard normal random variables,
#    with a mean of 10 and sd of 2.
#    including the mean and standard deviation of this vector.
my_vec = rnorm(15, mean=10, sd=2)  # generate 15 normally distributed random numbers
my_vec    # display resulting vector
mean(my_vec) #display mean
sd(my_vec)   #display standard deviation
#2.0 Random Number Generation
# b. Generate a vector of 15 standard normal random variables,
#    with a mean of 10 and sd of 2.
#    including the mean and standard deviation of this vector.
my_vec = rnorm(15000, mean=10, sd=2)  # generate 15 normally distributed random numbers
my_vec    # display resulting vector
mean(my_vec) #display mean
sd(my_vec)   #display standard deviation
#2.0 Random Number Generation
# b. Generate a vector of 15 standard normal random variables,
#    with a mean of 10 and sd of 2.
#    including the mean and standard deviation of this vector.
my_vec = rnorm(1000, mean=10, sd=2)  # generate 15 normally distributed random numbers
my_vec    # display resulting vector
mean(my_vec) #display mean
sd(my_vec)   #display standard deviation
#2.0 Random Number Generation
# b. Generate a vector of 15 standard normal random variables,
#    with a mean of 10 and sd of 2.
#    including the mean and standard deviation of this vector.
my_vec = rnorm(1000, mean=10, sd=2)  # generate 15 normally distributed random numbers
#my_vec    # display resulting vector
mean(my_vec) #display mean
sd(my_vec)   #display standard deviation
#2.0 Random Number Generation
# c. Generate a vector of 15 standard normal random variables,
#    with a mean of 10 and sd of 2.
#    including the mean and standard deviation of this vector.
my_vec = rnorm(1000, mean=10, sd=2)  # generate 15 normally distributed random numbers
#my_vec    # display resulting vector
mean(my_vec) #display mean
sd(my_vec)   #display standard deviation
?plot
?scatter.smooth
?plot
smoothScatter(wgt,hgt)
#3. Vector Operations
# a.	Weights of 6 Individuals are 60 kg, 72 kg, 57 kg, 90 kg, 95 kg, and 72 kg
# b.	Heights of the 6 individuals in meters are 1.80, 1.85, 1.72, 1.90, 1.74, 1.91.
# c.	Create these vectors in R Language
# d.	Create a scatterplot of weight vs. Height.  How do we interpret the scatterplot
# e.	 Calculate the BMI for each individual.  (BMI = weight/height^2
# f.	Calculate the mean weight
# g.	Subtract the mean from each value of weight.
# h.	Sum the results.  Now you know why we square the deviations from the mean to determine the standard deviation.
wgt = c(72,57,90,95,72)  # vector of weights
hgt = c(1.80,1.85,1.72,1.90,1.74,1.91)  # vector of heights
smootScatter(wgt,hgt)
hgt = c(1.80,1.85,1.72,1.90,1.74,1.91)  # vector of heights
smoothScatter(wgt,hgt)
#3. Vector Operations
# a.	Weights of 6 Individuals are 60 kg, 72 kg, 57 kg, 90 kg, 95 kg, and 72 kg
# b.	Heights of the 6 individuals in meters are 1.80, 1.85, 1.72, 1.90, 1.74, 1.91.
# c.	Create these vectors in R Language
# d.	Create a scatterplot of weight vs. Height.  How do we interpret the scatterplot
# e.	 Calculate the BMI for each individual.  (BMI = weight/height^2
# f.	Calculate the mean weight
# g.	Subtract the mean from each value of weight.
# h.	Sum the results.  Now you know why we square the deviations from the mean to determine the standard deviation.
wgt = c(60,72,57,90,95,72)  # vector of weights
hgt = c(1.80,1.85,1.72,1.90,1.74,1.91)  # vector of heights
smoothScatter(wgt,hgt)
plot(wgt, hgt, plot=scatter )
plot(wgt, hgt)
plot(wgt, hgt, main="height vs weight")
BMI = wgt / hgt^2
BMI
BMI = wgt / hgt^2
mean_wgt = mean(wgt)
mean_wgt
mean_wgt = mean(wgt)
mean_wgt
delta_wgt = wgt - mean_wgt
delta_wgt
sum_delta_wgt = sum(delta_wgt)
sum_delta_wgt
#3. Vector Operations
# a.	Weights of 6 Individuals are 60 kg, 72 kg, 57 kg, 90 kg, 95 kg, and 72 kg
# b.	Heights of the 6 individuals in meters are 1.80, 1.85, 1.72, 1.90, 1.74, 1.91.
# c.	Create these vectors in R Language
wgt = c(60,72,57,90,95,72)  # vector of weights
hgt = c(1.80,1.85,1.72,1.90,1.74,1.91)  # vector of heights
# d.	Create a scatterplot of weight vs. Height.  How do we interpret the scatterplot
plot(wgt, hgt, main="height vs weight") # simple scatterplot
# e.	Calculate the BMI for each individual.  (BMI = weight/height^2
BMI = wgt / hgt^2
BMI
# f.	Calculate the mean weight
mean_wgt = mean(wgt)
mean_wgt
# g.	Subtract the mean from each value of weight.
delta_wgt = wgt - mean_wgt
delta_wgt
# h.	Sum the results.  Now you know why we square the deviations from the mean to determine the standard deviation.
sum_delta_wgt = sum(delta_wgt)
sum_delta_wgt
#3. Vector Operations
# a.	Weights of 6 Individuals are 60 kg, 72 kg, 57 kg, 90 kg, 95 kg, and 72 kg
# b.	Heights of the 6 individuals in meters are 1.80, 1.85, 1.72, 1.90, 1.74, 1.91.
# c.	Create these vectors in R Language
wgt = c(60,72,57,90,95,72)  # vector of weights
wgt
hgt = c(1.80,1.85,1.72,1.90,1.74,1.91)  # vector of heights
hgt
# d.	Create a scatterplot of weight vs. Height.  How do we interpret the scatterplot
plot(wgt, hgt, main="height vs weight") # simple scatterplot
# e.	Calculate the BMI for each individual.  (BMI = weight/height^2
BMI = wgt / hgt^2
BMI
# f.	Calculate the mean weight
mean_wgt = mean(wgt)
mean_wgt
# g.	Subtract the mean from each value of weight.
delta_wgt = wgt - mean_wgt
delta_wgt
# h.	Sum the results.  Now you know why we square the deviations from the mean to determine the standard deviation.
sum_delta_wgt = sum(delta_wgt)
sum_delta_wgt
# h.	Sum the results.  Now you know why we square the deviations from the mean to determine the standard deviation.
sum_delta_wgt = sqrt(sum(delta_wgt^2))
sum_delta_wgt
sd(wgt)
sum_delta_wgt / 2
mean(wgt)
#4 Your data science profile.
#  Enter your data science profile into R as a data frame with two columns.
#  Call it your first name. The categories are computer programming, math,
#  statistics, machine learning, domain expertise, communication and presentation skills,
#  and data visualization.  Your ranking for each the category 1 to 5,
#  with 5 as best
#.
#  Create a bar graph of your data science profile.
#
categories = c("Computer Programming", "Math","Statistics","Machine Learngin",
+"Domain Expertise","Communication and Presentation Skills","Data Visualization")
#4 Your data science profile.
#  Enter your data science profile into R as a data frame with two columns.
#  Call it your first name. The categories are computer programming, math,
#  statistics, machine learning, domain expertise, communication and presentation skills,
#  and data visualization.  Your ranking for each the category 1 to 5,
#  with 5 as best
#.
#  Create a bar graph of your data science profile.
#
categories = c("Computer Programming", "Math","Statistics","Machine Learngin","Domain Expertise","Communication and Presentation Skills","Data Visualization")
#4 Your data science profile.
#  Enter your data science profile into R as a data frame with two columns.
#  Call it your first name. The categories are computer programming, math,
#  statistics, machine learning, domain expertise, communication and presentation skills,
#  and data visualization.  Your ranking for each the category 1 to 5,
#  with 5 as best
#.
#  Create a bar graph of your data science profile.
#
categories = c("Computer Programming", "Math","Statistics","Machine Learngin","Domain Expertise","Communication and Presentation Skills","Data Visualization")
ranking = c(5,4,4,3,3,2,3)
length(categories) == length(ranking)
terry = data.frame(categories,ranking)
terry
hist(terry)
?hist
plot(terry)
plot(terry,type='h')
?plot
plot(terry$categories,terry$ranking,type='h')
hist(terry$categories,terry$ranking)
hist(terry$ranking,terry$categories)
#4 Your data science profile.
#  Enter your data science profile into R as a data frame with two columns.
#  Call it your first name. The categories are computer programming, math,
#  statistics, machine learning, domain expertise, communication and presentation skills,
#  and data visualization.  Your ranking for each the category 1 to 5,
#  with 5 as best
#.
#  Create a bar graph of your data science profile.
#
categories = c("Prgmng", "Math","Stats","MachLearn","DomExp","Coms&Pres","DataVis")
ranking = c(5,4,4,3,3,2,3)
terry = data.frame(categories,ranking)
terry
plot(terry)
?plot
plot(terry, type ="h")
plot(terry, type ="s")
?plot
hist(terry)
hist(terry$ranking)
hist(terry$ranking, xlab=terry.categories)
hist(terry$ranking, xlab=terry$categories)
hist(terry$ranking)
hist(terry$categories)
hist(terry$ranking)
#4 Your data science profile.
#  Enter your data science profile into R as a data frame with two columns.
#  Call it your first name. The categories are computer programming, math,
#  statistics, machine learning, domain expertise, communication and presentation skills,
#  and data visualization.  Your ranking for each the category 1 to 5,
#  with 5 as best
#.
#  Create a bar graph of your data science profile.
#
categories = c("Prgmng", "Math","Stats","MachLearn","DomExp","Coms&Pres","DataVis")
ranking = c(5,4,4,3,3,2,3)
hist(terry$ranking)
#4 Your data science profile.
#  Enter your data science profile into R as a data frame with two columns.
#  Call it your first name. The categories are computer programming, math,
#  statistics, machine learning, domain expertise, communication and presentation skills,
#  and data visualization.  Your ranking for each the category 1 to 5,
#  with 5 as best
#.
#  Create a bar graph of your data science profile.
#
categories = c("Prgmng", "Math","Stats","MachLearn","DomExp","Coms&Pres","DataVis")
ranking = c(5,4,4,3,3,2,3)
terry = data.frame(categories,ranking)
hist(terry$ranking)
terry
#4 Your data science profile.
#  Enter your data science profile into R as a data frame with two columns.
#  Call it your first name. The categories are computer programming, math,
#  statistics, machine learning, domain expertise, communication and presentation skills,
#  and data visualization.  Your ranking for each the category 1 to 5,
#  with 5 as best
#.
#  Create a bar graph of your data science profile.
#
categories = c("Prgmng", "Math","Stats","MachLearn","DomExp","Coms&Pres","DataVis")
ranking = c(5,4,4,3,3,2,3)
terry = data.frame(categories,ranking) # create the data.frame
terry  # display profile
?ggplot2
?ggplot
?gplot
library(ggplot2)
?ggplot2
scatter <- ggplot(examData, aes(Anxiety, Exam))
examData <- read.delim("Exam Anxiety.dat", header = TRUE)
getwd()
ls()
examData <- read.delim("Exam+Anxiety.dat", header = TRUE)
getwd()
setwd("/User/giovanni/DeskTop/SMU MSDS/Doing Data Science/Unit2")
setwd("/User/giovanni/DeskTop/SMU MSDS/Doing Data Science/Unit2/")
setwd("/Users/giovanni/DeskTop/SMU MSDS/Doing Data Science/Unit2/")
examData <- read.delim("Exam+Anxiet.dat", header = TRUE)
examData <- read.delim("ExamAnxiet.dat", header = TRUE)
examData <- read.delim("ExamAnxiety.dat", header = TRUE)
getnames(examData)
getname(examData)
getnamespace(examData)
?getname
?getNames
getNames(examData)
scatter <- ggplot(examData, aes(Anxiety, Exam))
getNames(examData)
scatter <- ggplot(examData, aes(Anxiety, Exam))
scatter <- ggplot(examData, aes(Anxiety, Exam, colour = Gender))
setwd("/Users/giovanni/DeskTop/SMU MSDS/Doing Data Science/Unit2/")
festivalData <- read.delim("downloadfestival.dat", header = TRUE)
getNames(festivalData)
festivalHistogram <- ggplot(festivalData, aes(day1)) + opts(legend.position = "none")
festivalHistogram + geom_histogram(binwidth=0.4) + labs(x  = "Hygiene(Day 1 of Festival)", y= "Frequency")
